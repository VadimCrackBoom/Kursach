// <auto-generated />
using System;
using AutoServiceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoServiceApi.Migrations
{
    [DbContext(typeof(AutoServiceContext))]
    [Migration("20250422140734_database")]
    partial class database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("AutoServiceApi.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AutoServiceApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.AutoServiceApi.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentHistories");
                });

            modelBuilder.Entity("WebApplication1.AutoServiceApi.Models.AutoService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AutoServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Примерная, 1",
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Автосервис",
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0),
                            Phone = "+79990001122"
                        });
                });

            modelBuilder.Entity("WebApplication1.AutoServiceApi.Models.ServiceOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServicesOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Основные",
                            CreatedDate = new DateTime(2025, 4, 22, 14, 7, 33, 605, DateTimeKind.Utc).AddTicks(5227),
                            DurationMinutes = 60,
                            IsActive = true,
                            Name = "Замена масла",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Основные",
                            CreatedDate = new DateTime(2025, 4, 22, 14, 7, 33, 605, DateTimeKind.Utc).AddTicks(5806),
                            DurationMinutes = 60,
                            IsActive = true,
                            Name = "Диагностика",
                            Price = 1500m
                        });
                });

            modelBuilder.Entity("AutoServiceApi.Models.Appointment", b =>
                {
                    b.HasOne("WebApplication1.AutoServiceApi.Models.ServiceOffer", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoServiceApi.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.AutoServiceApi.Models.AppointmentHistory", b =>
                {
                    b.HasOne("AutoServiceApi.Models.Appointment", "Appointment")
                        .WithOne("History")
                        .HasForeignKey("WebApplication1.AutoServiceApi.Models.AppointmentHistory", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("AutoServiceApi.Models.Appointment", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("AutoServiceApi.Models.User", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("WebApplication1.AutoServiceApi.Models.ServiceOffer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
