// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AutoServiceContext))]
    partial class AutoServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("WebApplication1.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceOfferId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ServiceOfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WebApplication1.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("AppointmentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentHistoryId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentHistories");
                });

            modelBuilder.Entity("WebApplication1.Models.AutoService", b =>
                {
                    b.Property<int>("AutoServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AutoServiceId");

                    b.ToTable("AutoServices");
                });

            modelBuilder.Entity("WebApplication1.Models.ServiceOffer", b =>
                {
                    b.Property<int>("ServiceOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceOfferId");

                    b.HasIndex("AutoServiceId");

                    b.ToTable("ServiceOffers");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Appointment", b =>
                {
                    b.HasOne("WebApplication1.Models.ServiceOffer", "ServiceOffer")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceOffer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.AppointmentHistory", b =>
                {
                    b.HasOne("WebApplication1.Models.Appointment", "Appointment")
                        .WithOne("AppointmentHistory")
                        .HasForeignKey("WebApplication1.Models.AppointmentHistory", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("WebApplication1.Models.ServiceOffer", b =>
                {
                    b.HasOne("WebApplication1.Models.AutoService", "AutoService")
                        .WithMany("ServiceOffers")
                        .HasForeignKey("AutoServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoService");
                });

            modelBuilder.Entity("WebApplication1.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentHistory")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.AutoService", b =>
                {
                    b.Navigation("ServiceOffers");
                });

            modelBuilder.Entity("WebApplication1.Models.ServiceOffer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
